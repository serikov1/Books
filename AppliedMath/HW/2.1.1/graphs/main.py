import matplotlib.pyplot as plt
from matplotlib.ticker import (MultipleLocator, FormatStrFormatter,
AutoMinorLocator)
import numpy as np
# import pandas as pd
#библиотеки

#реализация выбора
print("1 - Вывести график на экран")
print("2 - Сохранить график на рабочий стол")
proverca = int(input())

# Ua_4 = [3.33, 5.66, 6.65, 7.31, 8.40, 9.69, 10.68, 11.87, 12.92, 1377, 14.82, 15.79, 21.9, 22.30, 23.8, 25.71, 27.75, 30.13, 32.03, 34.85, 37.51, 40.18, 44.63, 47.39, 50.23, 54.06, 57.71, 60.65, 64.20, 69.28, 72.29, 77.25, 80.19]
# Ik_4 = [18.5, 34, 41, 45.8, 53.2, 61.5, 67.7, 74.9, 81.2, 86.4, 92.7, 98.3, 105.1, 86.6, 64.9, 79.7, 100.8, 125, 144.6, 171.2, 181.5, 172, 155.1, 161.5, 173.9, 196.3, 217.6, 229, 233.5, 241.5, 248.5, 265.1, 276.3]

Ua_4 = [x for x in range(1000)]
Ik_4 = [
10,
10,
10,
10,
10,
10,
10,
10,
10,
10,
10,
10,
10,
10,
10,
10,
10,
10,
10,
10,
10,
10,
10,
10,
10,
10,
10,
10,
10,
10,
10,
10,
10,
10,
10,
10,
10,
10,
10,
10,
10,
10,
10,
10,
10,
10,
10,
10,
10,
10,
10,
10,
10,
10,
10,
10,
10,
10,
10,
10,
10,
10,
10,
10,
10,
10,
10,
10,
10,
10,
10,
10,
10,
10,
10,
10,
10,
10,
10,
10,
10,
10,
10,
10,
10,
10,
10,
10,
10,
10,
10,
10,
10,
10,
10,
10,
10,
10,
10,
10,
10,
10,
10,
10,
10,
10,
10,
10,
10,
10,
10,
10,
10,
10,
10,
10,
10,
10,
10,
10,
10,
10,
10,
10,
10,
10,
10,
10,
10,
10,
10,
10,
10,
10,
10,
10,
10,
10,
10,
10,
10,
10,
10,
10,
10,
10,
10,
10,
10,
10,
10,
10,
10,
10,
10,
10,
10,
10,
10,
10,
10,
10,
10,
10,
10,
10,
10,
10,
10,
10,
10,
10,
10,
10,
10,
10,
10,
10,
10,
10,
10,
10,
10,
10,
10,
10,
10,
10,
10,
10,
10,
10,
10,
10,
10,
10,
10,
10,
10,
10,
10,
10,
10,
10,
10,
10,
10,
10,
10,
10,
10,
10,
10,
10,
10,
10,
10,
10,
10,
10,
10,
10,
10,
10,
10,
10,
10,
10,
10,
10,
10,
10,
10,
10,
10,
10,
10,
10,
10,
10,
10,
10,
10,
10,
10,
10,
10,
10,
10,
10,
10,
10,
10,
10,
10,
10,
10,
10,
10,
10,
10,
10,
10,
10,
10,
10,
10,
9.99999,
9.99999,
9.99999,
9.99998,
9.99998,
9.99997,
9.99996,
9.99995,
9.99993,
9.99991,
9.99988,
9.99984,
9.99978,
9.99972,
9.99963,
9.99953,
9.99939,
9.99922,
9.999,
9.99873,
9.99839,
9.99797,
9.99746,
9.99683,
9.99606,
9.99514,
9.99402,
9.99267,
9.99107,
9.98917,
9.98692,
9.98428,
9.98119,
9.97761,
9.97346,
9.96869,
9.96323,
9.95702,
9.94998,
9.94205,
9.93316,
9.92325,
9.91223,
9.90006,
9.88668,
9.87203,
9.85606,
9.83874,
9.82002,
9.79988,
9.77829,
9.75524,
9.73072,
9.70474,
9.67729,
9.6484,
9.61807,
9.58634,
9.55324,
9.5188,
9.48306,
9.44606,
9.40785,
9.36847,
9.32798,
9.28642,
9.24385,
9.20031,
9.15586,
9.11056,
9.06445,
9.01758,
8.97001,
8.92177,
8.87293,
8.82351,
8.77357,
8.72316,
8.6723,
8.62104,
8.56942,
8.51747,
8.46522,
8.41271,
8.35998,
8.30704,
8.25392,
8.20066,
8.14727,
8.09378,
8.04022,
7.9866,
7.93294,
7.87926,
7.82559,
7.77193,
7.7183,
7.66472,
7.61119,
7.55775,
7.50439,
7.45112,
7.39797,
7.34493,
7.29202,
7.23925,
7.18662,
7.13415,
7.08184,
7.0297,
6.97773,
6.92595,
6.87435,
6.82294,
6.77173,
6.72072,
6.66992,
6.61933,
6.56896,
6.5188,
6.46887,
6.41916,
6.36968,
6.32043,
6.27141,
6.22263,
6.17408,
6.12578,
6.07772,
6.0299,
5.98232,
5.935,
5.88792,
5.84109,
5.79451,
5.74818,
5.7021,
5.65628,
5.61071,
5.5654,
5.52034,
5.47553,
5.43098,
5.38669,
5.34266,
5.29888,
5.25536,
5.2121,
5.16909,
5.12635,
5.08386,
5.04163,
4.99965,
4.95793,
4.91647,
4.87527,
4.83433,
4.79364,
4.75321,
4.71303,
4.67311,
4.63345,
4.59405,
4.5549,
4.516,
4.47736,
4.43897,
4.40084,
4.36296,
4.32534,
4.28797,
4.25086,
4.214,
4.17739,
4.14103,
4.10493,
4.06908,
4.03349,
3.99815,
3.96306,
3.92822,
3.89364,
3.85932,
3.82525,
3.79144,
3.75788,
3.72459,
3.69155,
3.65877,
3.62626,
3.59401,
3.56203,
3.53032,
3.49889,
3.46773,
3.43686,
3.40627,
3.37598,
3.34599,
3.31632,
3.28696,
3.25794,
3.22926,
3.20095,
3.17302,
3.1455,
3.1184,
3.09178,
3.06565,
3.04008,
3.0151,
2.99079,
2.96723,
2.94449,
2.92269,
2.90194,
2.88238,
2.86416,
2.84742,
2.83231,
2.81896,
2.80745,
2.79779,
2.78992,
2.7837,
2.77889,
2.77525,
2.77251,
2.77043,
2.76885,
2.76761,
2.76664,
2.76586,
2.76524,
2.76472,
2.7643,
2.76394,
2.76364,
2.76338,
2.76316,
2.76296,
2.76279,
2.76263,
2.76249,
2.76235,
2.76223,
2.76212,
2.76201,
2.76191,
2.76182,
2.76173,
2.76164,
2.76156,
2.76148,
2.76141,
2.76133,
2.76126,
2.76119,
2.76113,
2.76106,
2.761,
2.76094,
2.76088,
2.76082,
2.76076,
2.76071,
2.76065,
2.7606,
2.76055,
2.7605,
2.76045,
2.7604,
2.76035,
2.7603,
2.76025,
2.76021,
2.76016,
2.76012,
2.76007,
2.76003,
2.75998,
2.75994,
2.7599,
2.75986,
2.75982,
2.75978,
2.75974,
2.7597,
2.75966,
2.75962,
2.75958,
2.75954,
2.7595,
2.75946,
2.75943,
2.75939,
2.75935,
2.75932,
2.75928,
2.75924,
2.75921,
2.75917,
2.75913,
2.7591,
2.75906,
2.75903,
2.75899,
2.75896,
2.75892,
2.75889,
2.75885,
2.75882,
2.75878,
2.75875,
2.75871,
2.75868,
2.75864,
2.75861,
2.75857,
2.75854,
2.7585,
2.75847,
2.75843,
2.7584,
2.75836,
2.75832,
2.75829,
2.75825,
2.75822,
2.75818,
2.75815,
2.75811,
2.75808,
2.75804,
2.75801,
2.75798,
2.75794,
2.75791,
2.75788,
2.75784,
2.75781,
2.75778,
2.75775,
2.75772,
2.75769,
2.75766,
2.75763,
2.7576,
2.75758,
2.75755,
2.75753,
2.7575,
2.75748,
2.75745,
2.75743,
2.75741,
2.75739,
2.75736,
2.75734,
2.75732,
2.7573,
2.75728,
2.75726,
2.75724,
2.75722,
2.7572,
2.75718,
2.75716,
2.75714,
2.75712,
2.7571,
2.75708,
2.75706,
2.75704,
2.75702,
2.757,
2.75698,
2.75696,
2.75693,
2.75691,
2.75689,
2.75687,
2.75685,
2.75682,
2.7568,
2.75678,
2.75676,
2.75673,
2.75671,
2.75668,
2.75666,
2.75664,
2.75661,
2.75658,
2.75656,
2.75653,
2.75651,
2.75648,
2.75645,
2.75643,
2.7564,
2.75637,
2.75634,
2.75632,
2.75629,
2.75626,
2.75623,
2.7562,
2.75617,
2.75614,
2.75611,
2.75608,
2.75604,
2.75601,
2.75598,
2.75595,
2.75591,
2.75588,
2.75584,
2.75581,
2.75577,
2.75574,
2.7557,
2.75566,
2.75563,
2.75559,
2.75555,
2.75551,
2.75547,
2.75543,
2.75539,
2.75535,
2.7553,
2.75526,
2.75522,
2.75517,
2.75513,
2.75508,
2.75504,
2.75499,
2.75494,
2.75489,
2.75484,
2.75479,
2.75474,
2.75469,
2.75463,
2.75458,
2.75452,
2.75446,
2.75441,
2.75435,
2.75429,
2.75423,
2.75416,
2.7541,
2.75403,
2.75397,
2.7539,
2.75383,
2.75376,
2.75368,
2.7536,
2.75351,
2.75341,
2.7533,
2.75316,
2.75297,
2.75271,
2.75232,
2.75173,
2.75078,
2.74923,
2.74666,
2.74238,
2.7352,
2.72319,
2.70313,
2.66993,
2.61579,
2.52977,
2.39879,
2.21237,
1.97283,
1.70603,
1.4575,
1.26647,
1.1429,
1.07263,
1.03579,
1.01736,
1.00835,
1.004,
1.00191,
1.00091,
1.00044,
1.00021,
1.0001,
1.00005,
1.00002,
1.00001,
1.00001,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
]

# x1 = 2.51, 2.58, 2.67, 2.78, 2.87, 2.94, 3.03, 3.12, 3.23, 3.32, 3.41, 3.48, 3.57, 3.68, 3.75, 3.86, 3.93, 4.02, 4.13, 4.22, 4.31, 4.38, 4.47, 4.56, 4.67, 4.74, 4.85, 4.92, 5.01, 5.12, 5.21
# y1 = 50.2, 50.97, 51.75, 55.15, 56.17, 52.81, 56.08, 56.95, 58.06, 59.39, 60.32, 63.7, 60.89, 66.29, 65.13, 66.79, 65.88, 71.38, 68.32, 71.89, 75.27, 76.48, 76.32, 75.79, 76.88, 82.41, 81.96, 83.55, 87.16, 89.21, 88.89

#x2 = 206.06928,	397.01424,	579.65056,	745.15392,	884.7,	989.46448,	1044.576039
#y2 = 4.5, 9, 16.5, 21, 27, 28.5, 30

#x3 = 206.06928,	397.01424,	579.65056,	745.15392,	884.7,	989.46448,	1044.576039
#y3 = 9, 16.5, 27, 34.5, 40.5, 45, 46.5

#x4 = 206.06928,	397.01424,	579.65056,	745.15392,	884.7,	989.46448,	1044.576039
#y4 = 10.5, 21, 33, 45, 52.5, 57, 60

#x5 = 206.06928,	397.01424,	579.65056,	745.15392,	884.7,	989.46448,	1044.576039
#y5 = 12, 28.5, 43.5, 57, 66, 73.5, 78

#x6 = 206.06928,	397.01424,	579.65056,	745.15392,	884.7,	989.46448,	1044.576039
#y6 = 13.5, 33, 49.5, 66, 78, 88.5, 91.5



#xerr1=np.array([3.09104, 5.95521, 8.69476, 11.1773, 13.2705, 14.842])
#yerr1=np.array([1.5, 1.5, 1.5, 1.5, 1.5, 1.5])

#xerr2=np.array([3.09104, 5.95521, 8.69476, 11.1773, 13.2705, 14.842, 15.6686])
#yerr2=np.array([1.5,	1.5,	1.5,	1.5,	1.5,	1.5,	1.5])

#xerr3=np.array([3.09104, 5.95521, 8.69476, 11.1773, 13.2705, 14.842, 15.6686])
#yerr3=np.array([1.5,	1.5,	1.5,	1.5,	1.5,	1.5,	1.5])

#xerr4=np.array([3.09104, 5.95521, 8.69476, 11.1773, 13.2705, 14.842, 15.6686])
#yerr4=np.array([1.5,	1.5,	1.5,	1.5,	1.5,	1.5,	1.5])

#xerr5=np.array([3.09104, 5.95521, 8.69476, 11.1773, 13.2705, 14.842, 15.6686])
#yerr5=np.array([1.5,	1.5,	1.5,	1.5,	1.5,	1.5,	1.5])

#xerr6=np.array([3.09104, 5.95521, 8.69476, 11.1773, 13.2705, 14.842, 15.6686])
#yerr6=np.array([1.5,	1.5,	1.5,	1.5,	1.5,	1.5,	1.5])




tochki1 = np.linspace(Ua_4[0], Ua_4[-1], 10000)
#tochki2 = np.linspace(x2[0], x2[-1], 10000)
#tochki3 = np.linspace(x3[0], x3[-1], 10000)
#tochki4 = np.linspace(x4[0], x4[-1], 10000)
#tochki5 = np.linspace(x5[0], x5[-1], 10000)
#tochki6 = np.linspace(x6[0], x6[-1], 10000)


z1 = np.polyfit(Ua_4, Ik_4, 2)
p1 = np.poly1d(z1)

#z2 = np.polyfit(x2, y2, 1)
#p2 = np.poly1d(z2)

#z3 = np.polyfit(x3, y3, 1)
#p3 = np.poly1d(z3)

#z4 = np.polyfit(x4, y4, 1)
#p4 = np.poly1d(z4)

#z5 = np.polyfit(x5, y5, 1)
#p5 = np.poly1d(z5)

#z6 = np.polyfit(x6, y6, 1)
#p6 = np.poly1d(z6)




#fig, ax = plt.subplots(figsize=(10, 7))
if proverca == 1:
    fig, ax = plt.subplots(figsize=(10, 7))
else:
    fig, ax = plt.subplots(figsize=(10, 7), dpi = 600)
#для корректоного вывода на экан, не трогать


#plt.axis([16,32,0,4.6])
##обрезка координат


ax.set_title("P(x)", fontsize=16)                    #название графика
#названия и имена



#ax.set_yscale('log')
#логарифмический масштаб для оси Y



ax.grid(which="major", linewidth=1.3)                               #мажорная сетка
ax.grid(which="minor", linestyle="--", color="gray", linewidth=0.5) #минорная сетка
#создаём сетку для графика


ax.plot(Ua_4, Ik_4,"r.", markersize=8, label = 'Ток на образце 0.2 А')
#ax.plot(x2, y2,"b.", markersize=8, label = 'Ток на образце 0.4 А' )
#ax.plot(x3, y3,"g.", markersize=8, label = 'Ток на образце 0.6 А' )
#ax.plot(x4, y4,"y.", markersize=8, label = 'Ток на образце 0.8 А')
#ax.plot(x5, y5,"k.", markersize=8, label = 'Ток на образце 1.0 А' )
#ax.plot(x6, y6,"m.", markersize=8, label = 'Ток на образце 1.2 А' )
#строительство графика на рисунке
# ax.plot(tochki1, p1(tochki1), 'b--', label = '')
#ax.plot(tochki2, p2(tochki2), 'b--', label = '')
#ax.plot(tochki3, p3(tochki3), 'g--', label = '')
#ax.plot(tochki4, p4(tochki4), 'y--', label = '')
#ax.plot(tochki5, p5(tochki5), 'k--', label = '')
#ax.plot(tochki6, p6(tochki6), 'm--', label = '')


#ax.plot(x2, p2(x2), 'g--', label = 'Максимальный наклон кривой')
#ax.plot(x3, p3(x3), 'b--')
#в скобказ указываем точки графика для которого сторим линию тренда и функцию полинома
#строительство линии тренда
#ax.set_xticks(numpy.arange(0, 1000, 10))
#ax.set_yticks(numpy.arange(0, 1., 0.1))
#ax.legend()
ax.xaxis.set_minor_locator(AutoMinorLocator())
ax.yaxis.set_minor_locator(AutoMinorLocator())
ax.tick_params(which='major', length=10, width=1)
ax.tick_params(which='minor', length=5, width=1)
#строительство минорной и мажорной сетки

#ax.errorbar(x1, y1,
#xerr=xerr1,
#yerr=yerr1,
#fmt='.', color='red', markersize=5)

#ax.errorbar(x2, y2,
#xerr=xerr2,
#yerr=yerr2,
#fmt='.', color='blue', markersize=5)

#ax.errorbar(x3, y3,
#xerr=xerr3,
#yerr=yerr3,
#fmt='.', color='green', markersize=5)

#ax.errorbar(x4, y4,
#xerr=xerr4,
#yerr=yerr4,
#fmt='.', color='yellow', markersize=5)

#ax.errorbar(x5, y5,
#xerr=xerr5,
#yerr=yerr5,
#fmt='.', color='black', markersize=5)

#ax.errorbar(x6, y6,
#xerr=xerr6,
#yerr=yerr6,
#fmt='.', color='purple', markersize=5)






if proverca == 1:
    plt.show()
else:
    plt.savefig()
